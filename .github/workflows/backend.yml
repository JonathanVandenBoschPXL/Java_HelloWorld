# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: Build and Publish Java-Backend Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

#Sets up tje JDK with v17
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17

#Test with Maven
    - name: Test with Maven
      run: mvn -B test --file backend/pom.xml

#Build with Maven
    - name: Build with Maven
      run: mvn -B package --file backend/pom.xml

#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    steps:

# Set-up of Buildx which is the Docker BuildKit. -> This also scans for available files.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

#Custom debug info, to be deleted later on
    - name: RUNNING CUSTOM DEBUG INFO
      run: | 
        echo "PRINTING CUSTOM DEBUG INFO"
        pwd
        echo "========="
        ls -a
        echo "========="
        find . -name 'HelloWorld-0.0.1-SNAPSHOT.jar'
        echo "========="

#Log in to DockerHub with Username and Access Token provided through GitHub Secrets (Repo Settings)
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#Build the Docker Image and push it to DockerHub
    - name: Build and Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./backend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/java_helloworld:latest

#Returns the image hash
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

# ===================
# SONARQUBE JOB
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
    - run: ls
    - run: sudo dpkg -i linux_f5cli.x86_64.deb
    - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
    - run: sleep 30
    - run: ping 10.128.9.7 -c 2
    - name: Connect to SonarQube + Scan
      uses: kitabisa/sonarqube-action@v1.2.0
      with:
        host: ${{ secrets.SONAR_HOST_URL }}
        login: ${{ secrets.SONAR_TOKEN }}
        projectBaseDir: "backend/src/"
        projectKey: "PRiSMA"
    