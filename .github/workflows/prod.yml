# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: Build and Publish Dev Docker Images

on:
  push:
    branches: [ main ]

jobs:
# ===================
# PRISMA FRONTEND JOB
  build-push-frontend:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

#Sets up tje JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'

#Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma

    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma

#Run tests with NPM
# --                          = tells NPM to pass extra arguments to the test script defined in package.json
# --watch=false               = fixes the "run never ends" issue (GitHub Actions workflow keeps loading same step endlessly otherwise)
# --browsers=ChromeHeadless   = runs a headless version of Chrome since GitHub Actions has no "display".
#
#Tests temporarily disabled, they might not be used at all in the pipeline if UI tests are used instead.
#    - name: Test with NPM
#      run: npm run test -- --watch=false --browsers=ChromeHeadless
#      working-directory: frontend

#Build with NPM
    - name: Build with NPM
      run: npm run build
      working-directory: frontend/Prisma

#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    steps:

# Set-up of Buildx which is the Docker BuildKit. -> This also scans for available files.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

#Custom debug info, to be deleted later on
    - name: RUNNING CUSTOM DEBUG INFO
      run: | 
        echo "PRINTING CUSTOM DEBUG INFO"
        pwd
        echo "========="
        ls -a
        echo "========="
        ls -a ./frontend/Prisma
        echo "========="
        ls -a ./frontend/Prisma/dist
        echo "========="

#Log in to DockerHub with Username and Access Token provided through GitHub Secrets (Repo Settings)
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#Build the Docker Image and push it to DockerHub
    - name: Build and Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./frontend/Prisma/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/prisma_frontend:latest

#Returns the image hash
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
# ===================
# PRISMA SERVICE JOB
  build-push-prisma-service:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

#Sets up tje JDK with v17
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17

#Test with Maven
    - name: Test with Maven
      run: mvn -B test --file backend/prisma-service/pom.xml

#Build with Maven
    - name: Build with Maven
      run: mvn -B package --file backend/prisma-service/pom.xml

#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    steps:

# Set-up of Buildx which is the Docker BuildKit. -> This also scans for available files.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

#Custom debug info, to be deleted later on
    - name: RUNNING CUSTOM DEBUG INFO
      run: | 
        echo "PRINTING CUSTOM DEBUG INFO"
        pwd
        echo "========="
        ls -a
        echo "========="
        find . -name 'prisma-service-0.0.1-SNAPSHOT.jar'
        echo "========="

#Log in to DockerHub with Username and Access Token provided through GitHub Secrets (Repo Settings)
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#Build the Docker Image and push it to DockerHub
    - name: Build and Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./backend/prisma-service/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/prisma-service:latest

#Returns the image hash
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
# ===================
# IDENTITY SERVER JOB
  build-push-identity-server:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

#Sets up tje JDK with v17
    - name: Set up JDK
      uses: actions/setup-java@v1
      with:
        java-version: 17

#Test with Maven
    - name: Test with Maven
      run: mvn -B test --file backend/identity-server/pom.xml

#Build with Maven
    - name: Build with Maven
      run: mvn -B package --file backend/identity-server/pom.xml

#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    steps:

# Set-up of Buildx which is the Docker BuildKit. -> This also scans for available files.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

#Custom debug info, to be deleted later on
    - name: RUNNING CUSTOM DEBUG INFO
      run: | 
        echo "PRINTING CUSTOM DEBUG INFO"
        pwd
        echo "========="
        ls -a
        echo "========="
        find . -name 'identity-server-0.0.1-SNAPSHOT.jar'
        echo "========="

#Log in to DockerHub with Username and Access Token provided through GitHub Secrets (Repo Settings)
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#Build the Docker Image and push it to DockerHub
    - name: Build and Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./backend/identity-server/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/identity-server:latest

#Returns the image hash
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}

# ===================
# SONARQUBE JOB
  sonarqube:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    - run: wget -c https://github.com/PXL-IT/VMwareClusterInfo/blob/master/linux_sslvpn.tar
    - run: tar -xf linux_sslvpn.tar
    - run: sudo ./Install.sh
    - run: f5fpc -s -t login.pxl.be -x -u ${{ secrets.STUDENT_NUMBER }}@student.pxl.be
    - run: f5fpc --info
    - run: f5fpc --stop 