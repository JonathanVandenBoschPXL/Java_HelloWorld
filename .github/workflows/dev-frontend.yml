# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: 'FRONTEND: : Test - Build - Dockerize'

on:
  push:
    branches: [ dev , angular ]
    paths:
      - 'frontend/**'
  pull_request:
    branches: [ dev , angular ]
    paths:
      - 'frontend/**'
jobs:
  fetch-release-tag:
    runs-on: ubuntu-latest
    outputs:
      INCREMENTED_TAG: ${{ steps.INCREMENT_TAG_STEP.outputs.TAG_NAME }}
    steps:
    - uses: actions/checkout@v3
    # fetch latest tag for first time
    - uses: oprypin/find-latest-tag@v1
      name: Get latest release tag
      with:
        repository: PXL-PRiSMA/PRiSMA  # The repository to scan.
        releases-only: true  # We know that all relevant tags have a GitHub release for them.
        prefix: 'v'
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
      id: GET_NEWEST_TAG_STEP  # The step ID to refer to later.
    - run: echo ${{ steps.GET_NEWEST_TAG_STEP.outputs.tag }}
    # Incremenent tag
    - name: Increment pre-release tag
      run: |
        chmod +x ./.github/workflows/tagFixer.sh
        ./.github/workflows/tagFixer.sh ${{ steps.GET_NEWEST_TAG_STEP.outputs.tag }}
      shell: bash
      id: INCREMENT_TAG_STEP
    - run: echo ${{ steps.INCREMENT_TAG_STEP.outputs.TAG_NAME }}


  build-test-frontend:
    runs-on: ubuntu-latest
    needs: fetch-release-tag
    steps:
    #Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3
    #Sets up the JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    #Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma
    #Install angular CLI
    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma

    #Run tests with NPM
    # --                          = tells NPM to pass extra arguments to the test script defined in package.json
    # --watch=false               = fixes the "run never ends" issue (GitHub Actions workflow keeps loading same step endlessly otherwise)
    # --browsers=ChromeHeadless   = runs a headless version of Chrome since GitHub Actions has no "display".
    #
    #Tests temporarily disabled, they might not be used at all in the pipeline if UI tests are used instead.
    #    - name: Test with NPM
    #      run: npm run test -- --watch=false --browsers=ChromeHeadless
    #      working-directory: frontend

    - name: Test with npm
      run: npm test

    #Build with NPM
    # - name: Build with NPM
    #   run: npm run build -- --configuration=production
    #   working-directory: frontend/Prisma
    # # Upload artifact (package) to GitHub Actions cache for later use in "docker" job.
    # - uses: actions/upload-artifact@v3
    #   if: success()
    #   with:
    #     name: frontend
    #     path: ./frontend/Prisma/dist/prisma
    #     retention-days: 3

  sonarqube-prisma-service:
    needs: build-test-frontend
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:

    #Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3
    #Sets up the JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'



    # NEW: Install sonarqube for angular
    # - name: Install sonar-qube Angular plugin
    #   run: npm install sonar-scanner --save-dev
    # - name: install karma sonarqube reporter
    #   run: npm install -D karma-sonarqube-reporter
    

    #Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma
    #Install angular CLI
    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma


    - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
    - run: sudo dpkg -i linux_f5cli.x86_64.deb
    - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
    - run: sleep 10
    - run: ping 10.128.9.7 -c 2
    - name: SonarQube Scan frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      run: |
        cd frontend/Prisma
        npm install -g @angular/cli
        npm install -g sonarqube-scanner
        npm install -D karma-sonarqube-reporter
        npm run sonar
    - run: sleep 10
    - run: f5fpc --stop