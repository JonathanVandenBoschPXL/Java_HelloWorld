# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: 'FRONTEND: : Test - Build - Dockerize'

on:
  push:
    branches: [ dev , angular ]
    # paths:
    #   - 'frontend/**'
  pull_request:
    branches: [ dev , angular ]
    paths:
      - 'frontend/**'
jobs:
  build-test-frontend:
    runs-on: ubuntu-latest
    steps:
    #Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3
    #Sets up the JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    #Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma
    #Install angular CLI
    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma

    #Run tests with NPM
    # --                          = tells NPM to pass extra arguments to the test script defined in package.json
    # --watch=false               = fixes the "run never ends" issue (GitHub Actions workflow keeps loading same step endlessly otherwise)
    # --browsers=ChromeHeadless   = runs a headless version of Chrome since GitHub Actions has no "display".
    #
    #Tests temporarily disabled, they might not be used at all in the pipeline if UI tests are used instead.
    #    - name: Test with NPM
    #      run: npm run test -- --watch=false --browsers=ChromeHeadless
    #      working-directory: frontend

    - name: pre-install
      run: |
        npm install karma-junit-reporter --save-dev
        npm install karma-sonarqube-unit-reporter --save-dev
      working-directory: frontend/Prisma
    
    - uses: browser-actions/setup-chrome@latest

    - name: Test with npm
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      working-directory: frontend/Prisma
      # env:
      #   CI: false
      continue-on-error: true
    
    - name: debug
      run: | 
        echo ======
        ls -A 
        echo ======
        ls ./frontend
        echo ======
        ls ./frontend/Prisma
        echo ======
        ls ./frontend/Prisma/junit-results
        echo ======
        cat ./frontend/Prisma/junit-results/junit-results.xml
        echo ======
        cat ./frontend/Prisma/junit-results/junit-results-2.xml
        echo ======LOCV DEBUG
        ls ./frontend/Prisma/coverage
        echo ======LOCV DEBUG
        ls ./frontend/Prisma/coverage/prisma
        echo ======LOCV DEBUG
        cat ./frontend/Prisma/coverage//prisma/lcov.info
        echo =====================================================
        echo =====================================================
        ls /etc | wc -l
      if: github.event_name == 'push' || github.event.pull_request.merged == true


    - name: Upload XML test report.
      uses: actions/upload-artifact@v3
      if: success()
      with:
        name: prisma-frontend-test-results
        path: ./frontend/Prisma/junit-results
        retention-days: 3
    
    # Upload Maven artifact (package) to GitHub Actions cache for later use in "docker" job.
    # - name: Tar files
    #   run: tar -cvf prisma-frontend.tar ./frontend/Prisma
    # - name: list
    #   run: ls -A 
    # - uses: actions/upload-artifact@v3
    #   if: success()
    #   with:
    #     name: prisma-frontend
    #     path: prisma-frontend.tar
    #     retention-days: 1

    #Generate [Dorny] report
    - name: '[Dorny] Report'
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: '[Dorny] Report: frontend'
        path: ./frontend/Prisma/junit-results/junit-results-2.xml
        reporter: java-junit
        fail-on-error: true
    # - name: Publish Test Report
    #   uses: mikepenz/action-junit-report@v3
    #   if: always() # always run even if the previous step fails
    #   with:
    #     report_paths: './frontend/Prisma/junit-results/junit-results.xml'
    #     summary: true
    #     job_summary: true
    #     detailed_summary: true
    # - uses: ashley-taylor/junit-report-annotations-action@1.3
    #   if: always()
    #   with:
    #     access-token: ${{ secrets.GITHUB_TOKEN }}
    #Generate [Surefire] report
    # - name: '[Surefire] Report'
    #   uses: scacap/action-surefire-report@v1
    #   if: ${{ always() }}
    #   with:
    #     check_name: '[Surefire] Report: frontend'
    #     report_paths: './frontend/Prisma/junit-results/junit-results.xml'
    #     fail_on_test_failures: true
    # - name: XUnit Viewer
    #   id: xunit-viewer
    #   uses: AutoModality/action-xunit-viewer@v1  
    # - name: Attach the report
    #   uses: actions/upload-artifact@v1
    #   with:
    #     name: ${{ steps.xunit-viewer.outputs.report-name }}
    #     path: ${{ steps.xunit-viewer.outputs.report-dir }}
    #     retention-days: 1



    

    # - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - run: sudo dpkg -i linux_f5cli.x86_64.deb
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - run: sleep 10
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - run: ping 10.128.9.7 -c 2
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - name: SonarQube Scan frontend
    #   env:
    #     GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    #     SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
    #     SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
    #   #if: always()
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    #   uses: sonarsource/sonarqube-scan-action@master
    #   with: 
    #     projectBaseDir: frontend/Prisma
    #   continue-on-error: true
    # - run: sleep 10
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true
    # - run: f5fpc --stop
    #   if: github.event_name == 'push' || github.event.pull_request.merged == true

    #Build with NPM
    # - name: Build with NPM
    #   run: npm run build -- --configuration=production
    #   working-directory: frontend/Prisma
    # # Upload artifact (package) to GitHub Actions cache for later use in "docker" job.
    # - uses: actions/upload-artifact@v3
    #   if: success()
    #   with:
    #     name: frontend
    #     path: ./frontend/Prisma/dist/prisma
    #     retention-days: 3

  sonarqube-frontend:
    needs: build-test-frontend
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    steps:

    #Sets up the JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'



    # NEW: Install sonarqube for angular
    # - name: Install sonar-qube Angular plugin
    #   run: npm install sonar-scanner --save-dev
    # - name: install karma sonarqube reporter
    #   run: npm install -D karma-sonarqube-reporter
    

    # #Install modules with NPM
    # - name: Install NPM Modules
    #   run: npm install
    #   working-directory: frontend/Prisma
    # #Install angular CLI
    # - name: Install Angular CLI
    #   run: npm install -g @angular/cli
    #   working-directory: frontend/Prisma

    #Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

    # Download Maven artifact (package) to GitHub Actions workflow runner for use in this job.
    # - uses: actions/download-artifact@v2
    #   with:
    #     name: prisma-frontend
    # - name: debug 1
    #   run: ls -A
    # - name: Extract Tar files
    #   run: |
    #     ls -A
    #     tar -xvf prisma-frontend.tar -C /frontend/Prisma


    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    #Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma
    #Install angular CLI
    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma
    
    - name: pre-install
      run: |
        npm install karma-junit-reporter --save-dev
        npm install karma-sonarqube-unit-reporter --save-dev
      working-directory: frontend/Prisma
    
    - uses: browser-actions/setup-chrome@latest

    - name: Test with npm
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      working-directory: frontend/Prisma
      # env:
      #   CI: false
      continue-on-error: true


    - name: debug
      run: | 
        echo ======
        ls -A 
        echo ======
        ls ./frontend
        echo ======
        ls ./frontend/Prisma
        echo ======
        echo ======
        ls ./frontend/Prisma/junit-results
        echo ======
        cat ./frontend/Prisma/junit-results/junit-results.xml
        echo ======LOCV DEBUG
        ls ./frontend/Prisma/coverage
        echo ======LOCV DEBUG
        ls ./frontend/Prisma/coverage/prisma
        echo ======LOCV DEBUG
        cat ./frontend/Prisma/coverage//prisma/lcov.info


    - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
    - run: sudo dpkg -i linux_f5cli.x86_64.deb
    - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
    - run: sleep 10
    - run: ping 10.128.9.7 -c 2
    - name: SonarQube Scan frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      if: always()
      uses: sonarsource/sonarqube-scan-action@master
      # run: |
      #   cd frontend/Prisma
      #   npm install
      #   npm install -g @angular/cli
      #   npm install -g sonarqube-scanner
      #   npm install -D karma-sonarqube-reporter
      #   npm install karma-junit-reporter --save-dev
      #   npm install karma-sonarqube-reporter --save-dev
      #   npm run test
      #   ls -A 
      #   echo ======
      #   ls ./frontend
      #   echo ======
      #   ls ./frontend/Prisma
      #   echo ======
      #  npm run sonar
      with: 
        projectBaseDir: frontend/Prisma
      continue-on-error: true
    - run: sleep 10
    - run: f5fpc --stop