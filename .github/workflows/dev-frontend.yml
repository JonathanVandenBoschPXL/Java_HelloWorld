# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: 'FRONTEND: : Test - Build - Dockerize'

on:
  push:
    branches: [ dev , angular ]
    # paths:
    #   - 'frontend/**'
  pull_request:
    branches: [ dev , angular ]
    paths:
      - 'frontend/**'
jobs:
  build-test-frontend:
    runs-on: ubuntu-latest
    steps:
    #Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3
    #Sets up the JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'
    #Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend/Prisma
    #Install angular CLI
    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend/Prisma

    #Run tests with NPM
    # --                          = tells NPM to pass extra arguments to the test script defined in package.json
    # --watch=false               = fixes the "run never ends" issue (GitHub Actions workflow keeps loading same step endlessly otherwise)
    # --browsers=ChromeHeadless   = runs a headless version of Chrome since GitHub Actions has no "display".
    #
    #Tests temporarily disabled, they might not be used at all in the pipeline if UI tests are used instead.
    #    - name: Test with NPM
    #      run: npm run test -- --watch=false --browsers=ChromeHeadless
    #      working-directory: frontend

    - name: pre-install
      run: |
        npm install karma-junit-reporter --save-dev
        npm install karma-sonarqube-unit-reporter --save-dev
      working-directory: frontend/Prisma
    
    - uses: browser-actions/setup-chrome@latest

    - name: Test with npm
      run: npm run test -- --no-watch --no-progress --browsers=ChromeHeadlessCI
      working-directory: frontend/Prisma
      # env:
      #   CI: false
      continue-on-error: true
    
    - name: debug
      run: | 
        echo ======
        ls -A 
        echo ======
        ls ./frontend
        echo ======
        ls ./frontend/Prisma
        echo ======
        ls ./frontend/Prisma/junit-results
        echo ======
        cat ./frontend/Prisma/junit-results/junit-results.xml
        echo ======LOCV DEBUG
        ls ./frontend/Prisma/coverage
        echo ======LOCV DEBUG
        cat ./frontend/Prisma/coverage/lcov.info
    
    # Upload Maven artifact (package) to GitHub Actions cache for later use in "docker" job.
    - uses: actions/upload-artifact@v3
      if: success()
      with:
        name: frontend-junit-results
        path: ./frontend/Prisma/junit-results/junit-results.xml
        retention-days: 3
    

    - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
    - run: sudo dpkg -i linux_f5cli.x86_64.deb
    - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
    - run: sleep 10
    - run: ping 10.128.9.7 -c 2
    - name: SonarQube Scan frontend
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
        SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
      if: always()
      uses: sonarsource/sonarqube-scan-action@master
      with: 
        projectBaseDir: frontend/Prisma
      continue-on-error: true
    - run: sleep 10
    - run: f5fpc --stop

    #Build with NPM
    # - name: Build with NPM
    #   run: npm run build -- --configuration=production
    #   working-directory: frontend/Prisma
    # # Upload artifact (package) to GitHub Actions cache for later use in "docker" job.
    # - uses: actions/upload-artifact@v3
    #   if: success()
    #   with:
    #     name: frontend
    #     path: ./frontend/Prisma/dist/prisma
    #     retention-days: 3

  # sonarqube-frontend:
  #   needs: build-test-frontend
  #   if: github.event_name == 'push' || github.event.pull_request.merged == true
  #   runs-on: ubuntu-latest
  #   steps:

  #   #Sets up the JDK with v17
  #   - name: Set up Node.js 14 LTS
  #     uses: actions/setup-node@v2
  #     with:
  #       node-version: '14'



  #   # NEW: Install sonarqube for angular
  #   # - name: Install sonar-qube Angular plugin
  #   #   run: npm install sonar-scanner --save-dev
  #   # - name: install karma sonarqube reporter
  #   #   run: npm install -D karma-sonarqube-reporter
    

  #   # #Install modules with NPM
  #   # - name: Install NPM Modules
  #   #   run: npm install
  #   #   working-directory: frontend/Prisma
  #   # #Install angular CLI
  #   # - name: Install Angular CLI
  #   #   run: npm install -g @angular/cli
  #   #   working-directory: frontend/Prisma

  #   #Checkout the repo, this sets up the environment and scans for all files.
  #   - uses: actions/checkout@v3

  #   # Download Maven artifact (package) to GitHub Actions workflow runner for use in this job.
  #   - uses: actions/download-artifact@v2
  #     with:
  #       name: frontend-junit-results


  #   - name: debug
  #     run: | 
  #       echo ======
  #       ls -A 
  #       echo ======
  #       ls ./frontend
  #       echo ======
  #       ls ./frontend/Prisma
  #       echo ======
  #       echo ======
  #       ls ./frontend/Prisma/junit-results
  #       echo ======
  #       cat ./frontend/Prisma/junit-results/junit-results.xml


  #   - run: wget -c https://login.pxl.be/public/download/linux_f5cli.x86_64.deb --cipher 'DEFAULT:!DH'
  #   - run: sudo dpkg -i linux_f5cli.x86_64.deb
  #   - run: f5fpc -s -t login.pxl.be -x -u "${{ secrets.STUDENT_NUMBER }}@student.pxl.be" -p "${{ secrets.STUDENT_PASS }}" -b
  #   - run: sleep 10
  #   - run: ping 10.128.9.7 -c 2
  #   - name: SonarQube Scan frontend
  #     env:
  #       GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  #       SONAR_TOKEN: ${{ secrets.SONAR_TOKEN_FRONTEND }}
  #       SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
  #     if: always()
  #     uses: sonarsource/sonarqube-scan-action@master
  #     # run: |
  #     #   cd frontend/Prisma
  #     #   npm install
  #     #   npm install -g @angular/cli
  #     #   npm install -g sonarqube-scanner
  #     #   npm install -D karma-sonarqube-reporter
  #     #   npm install karma-junit-reporter --save-dev
  #     #   npm install karma-sonarqube-reporter --save-dev
  #     #   npm run test
  #     #   ls -A 
  #     #   echo ======
  #     #   ls ./frontend
  #     #   echo ======
  #     #   ls ./frontend/Prisma
  #     #   echo ======
  #     #  npm run sonar
  #     with: 
  #       projectBaseDir: frontend/Prisma
  #     continue-on-error: true
  #   - run: sleep 10
  #   - run: f5fpc --stop