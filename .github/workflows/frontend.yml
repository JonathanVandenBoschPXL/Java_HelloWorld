# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: Build and Publish Angular-Frontend Docker Image

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3

#Sets up tje JDK with v17
    - name: Set up Node.js 14 LTS
      uses: actions/setup-node@v2
      with:
        node-version: '14'

#Install modules with NPM
    - name: Install NPM Modules
      run: npm install
      working-directory: frontend

    - name: Install Angular CLI
      run: npm install -g @angular/cli
      working-directory: frontend

#Run tests with NPM
# --                          = tells NPM to pass extra arguments to the test script defined in package.json
# --watch=false               = fixes the "run never ends" issue (GitHub Actions workflow keeps loading same step endlessly otherwise)
# --browsers=ChromeHeadless   = runs a headless version of Chrome since GitHub Actions has no "display".
#
#Tests temporarily disabled, they might not be used at all in the pipeline if UI tests are used instead.
#    - name: Test with NPM
#      run: npm run test -- --watch=false --browsers=ChromeHeadless
#      working-directory: frontend

#Build with NPM
    - name: Build with NPM
      run: npm run build
      working-directory: frontend

#  deploy:
#    needs: build-and-test
#    runs-on: ubuntu-latest
#    steps:

# Set-up of Buildx which is the Docker BuildKit. -> This also scans for available files.
    - name: Set up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v2

#Custom debug info, to be deleted later on
    - name: RUNNING CUSTOM DEBUG INFO
      run: | 
        echo "PRINTING CUSTOM DEBUG INFO"
        pwd
        echo "========="
        ls -a
        echo "========="
        ls -a ./frontend
        echo "========="
        ls -a ./frontend/dist
        echo "========="

#Log in to DockerHub with Username and Access Token provided through GitHub Secrets (Repo Settings)
    - name: Login to DockerHub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

#Build the Docker Image and push it to DockerHub
    - name: Build and Push to DockerHub
      id: docker_build
      uses: docker/build-push-action@v3
      with:
        context: .
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ secrets.DOCKERHUB_USERNAME }}/java_helloworld_frontend:latest

#Returns the image hash
    - name: Image digest
      run: echo ${{ steps.docker_build.outputs.digest }}
