# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: RELEASE PIPELINE

#on:
#   release:
#     types: [published]
on:
  push:
    branches: [ dev ]
  pull_request:
    branches: [ dev ]

jobs:
  build-push:
    runs-on: ubuntu-latest
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3
    - run: echo ${{ github.ref }}
    - run: echo ${{ github.ref_name }}
    #- run: echo ${{ github.ref#refs/tags/ }}
    - run: echo HEADS
    - run: echo ${{ github.head_ref }}
    #- run: echo ${{ github.ref#refs/heads/ }}
    - run: git branch --show-current
    #- run: curl -L -X GET 'https://api.github.com/repos/JonathanVandenBoschPXL/Java_HelloWorld/tags' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}'
    - run: export TOKEN=${{ secrets.GITHUB_TOKEN }}
    # - name: Run script file
    #   run: |
    #      chmod +x ./tagFixer.sh
    #      ./tagFixer.sh
    #   shell: bash
    # - run: curl -X GET 'https://api.github.com/repos/JonathanVandenBoschPXL/Java_HelloWorld/tags' -H 'Authorization: Bearer ${{ secrets.GITHUB_TOKEN }} -H "Accept: application/vnd.github+json"
    - uses: oprypin/find-latest-tag@v1
      with:
        repository: JonathanVandenBoschPXL/Java_HelloWorld  # The repository to scan.
        releases-only: true  # We know that all relevant tags have a GitHub release for them.
        prefix: 'v'
        regex: '^[v]\d+\.\d+\.\d+(-pre)\d+$'
        sort-tags: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
      id: octokit  # The step ID to refer to later.
    - run: ${{ steps.octokit.outputs.tag }}

      
