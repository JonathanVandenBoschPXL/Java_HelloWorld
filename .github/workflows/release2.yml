# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven
#
#
# "docker" job made with help from https://github.com/docker/build-push-action
#
#
name: RELEASE PIPELINE 2

#on:
#   release:
#     types: [published]
on:
  push:
    branches: [ dev , release-pipeline ]
  pull_request:
    branches: [ dev , release-pipeline ]

jobs:
  RELEASE:
    #if: github.event_name == 'push' || github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    outputs:
      INCREMENTED_TAG: ${{ steps.INCREMENT_TAG_STEP.outputs.TAG_NAME }}
    steps:
#Checkout the repo, this sets up the environment and scans for all files.
    - uses: actions/checkout@v3


    # fetch latest tag for first time
    - uses: oprypin/find-latest-tag@v1
      name: get newest release
      with:
        repository: JonathanVandenBoschPXL/Java_HelloWorld  # The repository to scan.
        releases-only: true  # We know that all relevant tags have a GitHub release for them.
        prefix: 'v'
        #regex: '^[v]\d+\.\d+\.\d+.*$'
        #sort-tags: true
        token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
      id: GET_NEWEST_TAG_STEP  # The step ID to refer to later.
    - run: echo ${{ steps.GET_NEWEST_TAG_STEP.outputs.tag }}


    # Incremenent tag
    - name: Increment pre-release tag
      run: |
        chmod +x ./.github/workflows/tagFixer.sh
        ./.github/workflows/tagFixer.sh ${{ steps.GET_NEWEST_TAG_STEP.outputs.tag }}
      shell: bash
      id: INCREMENT_TAG_STEP
    - run: echo ${{ steps.INCREMENT_TAG_STEP.outputs.TAG_NAME }}



    - run: echo ${{ github.ref }}
    - run: echo ${{ github.ref_name }}
    #- run: echo ${{ github.ref#refs/tags/ }}
    - run: echo HEADS
    - run: echo ${{ github.head_ref }}
    #- run: echo ${{ github.ref#refs/heads/ }}
    - run: git branch --show-current

    # get latest pre-release
    # - uses: oprypin/find-latest-tag@v1
    #   name: get latest pre-release
    #   with:
    #     repository: JonathanVandenBoschPXL/Java_HelloWorld  # The repository to scan.
    #     releases-only: true  # We know that all relevant tags have a GitHub release for them.
    #     prefix: 'v'
    #     regex: '^[v]\d+\.\d+\.\d+(-pre)\d+$'
    #     sort-tags: true
    #     token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
    #   id: octokit  # The step ID to refer to later.
    # - run: echo ${{ steps.octokit.outputs.tag }}


    







    
  

  release-create:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    needs: release
    runs-on: ubuntu-latest
    steps:
      #simulate workflow run time & refetch latest tag afterwards
      - run: sleep 5

      - uses: oprypin/find-latest-tag@v1
        name: Re-fetch latest tag
        with:
          repository: JonathanVandenBoschPXL/Java_HelloWorld  # The repository to scan.
          releases-only: true  # We know that all relevant tags have a GitHub release for them.
          prefix: 'v'
          #regex: '^[v]\d+\.\d+\.\d+.*$'
          #sort-tags: true
          token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
        id: REGET_NEWEST_TAG_STEP  # The step ID to refer to later.
      - run: echo ${{ steps.REGET_NEWEST_TAG_STEP.outputs.tag }}

      # GET LATETS RELEASE ON PRISMA
      # - uses: oprypin/find-latest-tag@v1
      #   name: get latest release
      #   with:
      #     repository: PXL-PRiSMA/PRiSMA  # The repository to scan.
      #     releases-only: true  # We know that all relevant tags have a GitHub release for them.
      #     prefix: 'v'
      #     regex: '^[v]\d+\.\d+\.\d+$'
      #     sort-tags: true
      #     token: ${{ secrets.PERSONAL_ACCESS_TOKEN_CLASSIC }}
      #   id: octokit2  # The step ID to refer to later.
      # - run: echo ${{ steps.octokit2.outputs.tag }}



      # - name: Create tag
      #   if: always()
      #   uses: actions/github-script@v6
      #   with:
      #     script: |
      #       github.rest.git.createRef({
      #         owner: context.repo.owner,
      #         repo: context.repo.repo,
      #         ref: 'refs/tags/v0.0.10-pre1',
      #         sha: context.sha
      #       })


      
      - run: echo ${{ needs.RELEASE.outputs.INCREMENTED_TAG }}

      - name: test1
        if: ${{ steps.REGET_NEWEST_TAG_STEP.outputs.tag != needs.RELEASE.outputs.INCREMENTED_TAG }}
        run: echo NOT the same

      - name: test2
        if: ${{ steps.REGET_NEWEST_TAG_STEP.outputs.tag == needs.RELEASE.outputs.INCREMENTED_TAG }}
        run: echo theyre the same

      


      - name: Create Release
        if: ${{ steps.REGET_NEWEST_TAG_STEP.outputs.tag != needs.RELEASE.outputs.INCREMENTED_TAG }}
        uses: actions/github-script@v6
        with:
          script: |
            github.rest.repos.createRelease({
              owner: context.repo.owner,
              repo: context.repo.repo,
              tag_name: '${{ needs.RELEASE.outputs.INCREMENTED_TAG }}',
              target_commitish: 'dev',
              name: '${{ needs.RELEASE.outputs.INCREMENTED_TAG }}',
              body: 'Automated pre-release triggered by feature-branch merge to branch: ${{ github.ref_name }}',
              generate_release_notes: true,
              prerelease: true
            });
      - run: echo ${{ github.head_ref }}

      - name: Tag already exists
        if: ${{ steps.REGET_NEWEST_TAG_STEP.outputs.tag == needs.RELEASE.outputs.INCREMENTED_TAG }}
        run: echo Tag already exists!
  temp:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    needs: release
    runs-on: ubuntu-latest
    steps:
    - run: echo temp
  release-aftermath:
    if: github.event_name == 'push' || github.event.pull_request.merged == true
    needs: temp
    runs-on: ubuntu-latest
    steps:
      #simulate workflow run time & refetch latest tag afterwards
      - run: echo ${{ needs.RELEASE.outputs.INCREMENTED_TAG }}

        
